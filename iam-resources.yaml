AWSTemplateFormatVersion: '2010-09-09'
Description: 'CloudFormation template for IAM resources automation'

Resources:
  # One-Time Password in Secrets Manager
  UserPassword:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: 'user-initial-password'
      GenerateSecretString:
        PasswordLength: 16
        RequireEachIncludedType: true
        ExcludePunctuation: true

  # S3 User Group
  S3UserGroup:
    Type: AWS::IAM::Group
    Properties:
      GroupName: S3ReadOnlyGroup
      ManagedPolicyArns: 
        - arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess

  # EC2 User Group
  EC2UserGroup:
    Type: AWS::IAM::Group
    Properties:
      GroupName: EC2ReadOnlyGroup
      ManagedPolicyArns: 
        - arn:aws:iam::aws:policy/AmazonEC2ReadOnlyAccess

  # IAM Users
  EC2User:
    Type: AWS::IAM::User
    Properties:
      UserName: ec2-user
      Groups: 
        - !Ref EC2UserGroup
      LoginProfile:
        Password: !Join ['', ['{{resolve:secretsmanager:', !Ref UserPassword, ':SecretString}}']]
        PasswordResetRequired: true

  S3User:
    Type: AWS::IAM::User
    Properties:
      UserName: s3-user
      Groups: 
        - !Ref S3UserGroup
      LoginProfile:
        Password: !Join ['', ['{{resolve:secretsmanager:', !Ref UserPassword, ':SecretString}}']]
        PasswordResetRequired: true

  # Store user emails in Parameter Store
  EC2UserEmail:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /iam/ec2-user/email
      Type: String
      Value: ec2-user@amalitech.com

  S3UserEmail:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /iam/s3-user/email
      Type: String
      Value: s3-user@amalitech.com

  # Lambda Role
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: SecretsAndParameterAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ssm:GetParameter
                  - secretsmanager:GetSecretValue
                Resource: '*'

  # Lambda Function
  UserCreationNotifier:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Role: !GetAtt LambdaRole.Arn
      Code:
        ZipFile: |
          import json
          import boto3
          import os

          def handler(event, context):
              # Get the username from the event
              detail = event['detail']
              username = detail['requestParameters']['userName']
              
              # Initialize AWS clients
              ssm = boto3.client('ssm')
              secrets = boto3.client('secretsmanager')
              
              try:
                  # Get user email from Parameter Store
                  email_param = ssm.get_parameter(Name=f'/iam/{username}/email')
                  email = email_param['Parameter']['Value']
                  
                  # Get temporary password from Secrets Manager
                  secret = secrets.get_secret_value(SecretId='user-initial-password')
                  password = secret['SecretString']
                  
                  # Log the information
                  print(f"New user created: {username}")
                  print(f"User email: {email}")
                  print(f"Temporary password: {password}")
                  
                  return {
                      'statusCode': 200,
                      'body': json.dumps('Successfully processed new user creation')
                  }
              except Exception as e:
                  print(f"Error processing user creation: {str(e)}")
                  raise e
      Runtime: python3.9
      Timeout: 30
      MemorySize: 128

  # EventBridge Rule
  UserCreationRule:
    Type: AWS::Events::Rule
    Properties:
      Description: "Rule to detect IAM user creation"
      EventPattern:
        source:
          - aws.iam
        detail-type:
          - AWS API Call via CloudTrail
        detail:
          eventSource:
            - iam.amazonaws.com
          eventName:
            - CreateUser
      State: ENABLED
      Targets:
        - Arn: !GetAtt UserCreationNotifier.Arn
          Id: "UserCreationNotifierTarget"

  # Lambda Permission for EventBridge
  LambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref UserCreationNotifier
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt UserCreationRule.Arn